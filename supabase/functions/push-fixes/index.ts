import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { owner, repo, files, branchName } = await req.json();
    
    if (!owner || !repo || !files || !Array.isArray(files)) {
      return new Response(
        JSON.stringify({ error: 'Missing required parameters' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const GITHUB_TOKEN = Deno.env.get('GITHUB_TOKEN');
    if (!GITHUB_TOKEN) {
      console.error('GITHUB_TOKEN not configured');
      return new Response(
        JSON.stringify({ error: 'GitHub integration not configured' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const headers = {
      'Authorization': `Bearer ${GITHUB_TOKEN}`,
      'Accept': 'application/vnd.github.v3+json',
      'User-Agent': 'Lovable-Code-Fixer',
      'Content-Type': 'application/json',
    };

    // Get the latest commit SHA from main branch
    const mainBranchResponse = await fetch(
      `https://api.github.com/repos/${owner}/${repo}/git/ref/heads/main`,
      { headers }
    );

    if (!mainBranchResponse.ok) {
      const error = await mainBranchResponse.json();
      return new Response(
        JSON.stringify({ error: 'Failed to get main branch', details: error.message }),
        { status: mainBranchResponse.status, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const mainBranchData = await mainBranchResponse.json();
    const baseSha = mainBranchData.object.sha;

    // Create a new branch
    const newBranch = branchName || `auto-fix-${Date.now()}`;
    const createBranchResponse = await fetch(
      `https://api.github.com/repos/${owner}/${repo}/git/refs`,
      {
        method: 'POST',
        headers,
        body: JSON.stringify({
          ref: `refs/heads/${newBranch}`,
          sha: baseSha,
        }),
      }
    );

    if (!createBranchResponse.ok) {
      const error = await createBranchResponse.json();
      return new Response(
        JSON.stringify({ error: 'Failed to create branch', details: error.message }),
        { status: createBranchResponse.status, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Update files in the new branch
    const updatePromises = files.map(async (file: any) => {
      const content = btoa(file.content); // Base64 encode

      const updateResponse = await fetch(
        `https://api.github.com/repos/${owner}/${repo}/contents/${file.path}`,
        {
          method: 'PUT',
          headers,
          body: JSON.stringify({
            message: `Auto-fix: ${file.path}`,
            content,
            branch: newBranch,
            sha: file.sha,
          }),
        }
      );

      return {
        path: file.path,
        success: updateResponse.ok,
        status: updateResponse.status,
      };
    });

    const updateResults = await Promise.all(updatePromises);

    // Create pull request
    const prResponse = await fetch(
      `https://api.github.com/repos/${owner}/${repo}/pulls`,
      {
        method: 'POST',
        headers,
        body: JSON.stringify({
          title: 'Auto Code Fixes',
          body: `Automated code fixes generated by Auto Code Fixer.\n\nFiles updated:\n${files.map((f: any) => `- ${f.path}`).join('\n')}`,
          head: newBranch,
          base: 'main',
        }),
      }
    );

    if (!prResponse.ok) {
      const error = await prResponse.json();
      return new Response(
        JSON.stringify({ 
          error: 'Failed to create pull request', 
          details: error.message,
          updateResults,
        }),
        { status: prResponse.status, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    const prData = await prResponse.json();

    return new Response(
      JSON.stringify({
        success: true,
        pullRequestUrl: prData.html_url,
        pullRequestNumber: prData.number,
        branch: newBranch,
        updateResults,
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error in push-fixes function:', error);
    return new Response(
      JSON.stringify({ error: error instanceof Error ? error.message : 'Unknown error' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
